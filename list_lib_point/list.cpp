#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <string.h>

#define LIST_TYPE
#include "control.h"
#undef LIST_TYPE

struct list_t
	{
		data_t field; 				// поле данных
		struct list_t *next; 		// указатель на следующий элемент
		struct list_t *prev; 		// указатель на предыдущий элемент
	};

//{--------------------------------------------------------------------------------------------------------------------------------------
/**
 *
 *	constructor
 *	возвращает ссылку на список с нулевыми указателями и заполненным полем данных
 */	
struct list_t* list_create(data_t field)
	{
		list_t *list = (list_t*)calloc(1, sizeof(list_t));
		assert(list != NULL);
		
		list->field = field;
		
		list->next = NULL;
		list->prev = NULL;
		
		return(list);
	}
//}--------------------------------------------------------------------------------------------------------------------------------------	


//{--------------------------------------------------------------------------------------------------------------------------------------
/**
 *
 *	destructor
 *	освобождает память списка
 */	
void list_destroy(list_t** list)
	{
		assert(list != NULL);
		
		if((*list) == NULL)
			return;
		
		(*list)->field = 0;
		(*list)->next = NULL;
		(*list)->prev = NULL;
		
		free(*list);
		
		(*list) = NULL;
	}
//}--------------------------------------------------------------------------------------------------------------------------------------	
	
	
//{--------------------------------------------------------------------------------------------------------------------------------------	
/**
 *
 *	info
 *	напечатать полную информацию о элементе в файл
 */
void list_full_info(list_t* list, FILE* data_file)
	{
		assert(list != NULL);
		assert(data_file != NULL);
		
		fprintf(data_file, "list address = %d\n", (int) list);
		fprintf(data_file, "list next = %d\n", (int) list->next);
		fprintf(data_file, "list prev = %d\n", (int) list->prev);
		
		#define LIST_FULL_INFO
		#include "control.h"
		#undef LIST_FULL_INFO
		
		fprintf(data_file, "\n\n\n");
	}
//}--------------------------------------------------------------------------------------------------------------------------------------


//{--------------------------------------------------------------------------------------------------------------------------------------	
/**
 *
 *	info
 *	напечатать короткую информацию об элементе в файл
 */
void list_short_info(list_t* list, FILE* data_file)
	{
		assert(list != NULL);
		assert(data_file != NULL);
		
		#define LIST_SHORT_INFO
		#include "control.h"
		#undef LIST_SHORT_INFO
	}
//}--------------------------------------------------------------------------------------------------------------------------------------


//{--------------------------------------------------------------------------------------------------------------------------------------	
/**
 *
 *	info
 *	напечатать полную информацию о корне в файл
 */
void root_full_info(list_t* list, FILE* data_file)
	{
		assert(list != NULL);
		assert(data_file != NULL);
		
		while(list != NULL)
			{
				list_full_info(list, data_file);
				
				list = list->next;
			}
	}
//}--------------------------------------------------------------------------------------------------------------------------------------


//{--------------------------------------------------------------------------------------------------------------------------------------	
/**
 *
 *	info
 *	напечатать краткую информацию о корне в файл
 */
void root_short_info(list_t* list, FILE* data_file)
	{
		assert(list != NULL);
		assert(data_file != NULL);
		
		while(list != NULL)
			{
				list_short_info(list, data_file);
				
				list = list->next;
			}
	}
//}--------------------------------------------------------------------------------------------------------------------------------------


//{--------------------------------------------------------------------------------------------------------------------------------------	
/**
 *
 *	add_next_elem
 *	добавляет следующий элемент add_list в list
 */	
void add_next_elem(list_t *list, list_t *add_list)
	{
		assert(list != NULL);
		assert(add_list != NULL);
		
		add_list->prev = list;
		add_list->next = list->next;
		
		list->next = add_list;
		
		if(add_list->next != 0)
			add_list->next->prev = add_list;
	}
//}--------------------------------------------------------------------------------------------------------------------------------------

	
//{--------------------------------------------------------------------------------------------------------------------------------------	
/**
 *
 *	add_prev_elem
 *	добавляет предыдущий элемент add_list в list
 */	
void add_prev_elem(list_t *list, list_t *add_list)
	{
		assert(list != NULL);
		assert(add_list != NULL);
		
		add_list->next = list;
		add_list->prev = list->prev;
		
		list->prev = add_list;
		
		if(add_list->prev != 0)
			add_list->prev->next = add_list;
	}
//}--------------------------------------------------------------------------------------------------------------------------------------


//{--------------------------------------------------------------------------------------------------------------------------------------
/**
 *
 *	delete_elem
 *	удаляет элемент list из списка
 */		
void delete_elem(list_t *list)
	{
		assert(list != NULL);
	
		if (list->prev != NULL)
			list->prev->next = list->next; // переставляем указатель
		if (list->next != NULL)
			list->next->prev = list->prev; // переставляем указатель
	}
//}--------------------------------------------------------------------------------------------------------------------------------------


//{--------------------------------------------------------------------------------------------------------------------------------------
/**
 *
 *	change_elem
 *	меняет два элемента в списке местами
 */	
void change_elem(list_t *list1, list_t *list2)
	{
		assert(list1 != NULL);
		assert(list2 != NULL);
		
		data_t field = list1->field;
		list1->field = list2->field;
		list2->field = field;
	}
//}--------------------------------------------------------------------------------------------------------------------------------------